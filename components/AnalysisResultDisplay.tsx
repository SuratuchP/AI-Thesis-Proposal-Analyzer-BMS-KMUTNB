
import React, { useState } from 'react';
import { AnalysisResult, CriterionFeedback } from '../types';
import { ScoreRating } from './ScoreRating';
import { 
    ThumbsUpIcon, LightbulbIcon, ClipboardListIcon, BookOpenIcon, 
    CheckCircleIcon, AlertTriangleIcon, WrenchScrewdriverIcon, CheckBadgeIcon,
    FlagIcon, ListBulletIcon, QuestionMarkCircleIcon, BriefcaseIcon,
    ClipboardCopyIcon, EnvelopeIcon
} from './icons';

interface AnalysisResultDisplayProps {
  result: AnalysisResult;
}

const scoreCriteriaLabels: { [key: string]: string } = {
  problemClarityInContext: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£)',
  measurableObjectives: '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÑ‡∏î‡πâ',
  scopeAndTimelineFeasibility: '‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô 10 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)',
  methodologyInPractice: '‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)',
  synergyAndValueForCompany: '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£',
};

const renderContent = (content: any) => {
    if (typeof content === 'object' && content !== null) {
        if (content.reason && typeof content.score !== 'undefined') {
            return `(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ${content.reason} - ${content.score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)`;
        }
        return JSON.stringify(content);
    }
    return content;
};

// Helper function to format the entire result for chat apps
const formatForChat = (result: AnalysisResult, totalScore: number, maxScore: number): string => {
    const percentage = ((totalScore / maxScore) * 100).toFixed(0);
    const recommendationText = parseInt(percentage) >= 50
        ? "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ"
        : "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î";

    let chatText = `*üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô üìä*\n\n`;

    // Advisor Summary
    chatText += `*üìù ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå*\n`;
    chatText += `*‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:* ${result.advisorSummary.status}\n`;
    chatText += `*‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏Å:* ${result.advisorSummary.keyRisk}\n`;
    chatText += `*‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏∑‡∏≠:* ${result.advisorSummary.discussionPoint}\n\n`;
    
    // Overall Recommendation
    chatText += `*‚≠ê ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠*\n`;
    chatText += `*‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°:* ${totalScore} / ${maxScore} (${percentage}%)\n`;
    chatText += `*‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:* ${recommendationText}\n\n`;
    
    // Red Flags
    if (result.redFlags && result.redFlags.length > 0) {
        chatText += `*üö© ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Red Flags)*\n`;
        result.redFlags.forEach(flag => {
            chatText += `- ${flag}\n`;
        });
        chatText += `\n`;
    }

    // Strengths
    if (result.strengths && result.strengths.length > 0) {
        chatText += `*üëç ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô (Strengths)*\n`;
        result.strengths.forEach(strength => {
            chatText += `- ${strength}\n`;
        });
        chatText += `\n`;
    }

    // Areas for Improvement
    if (result.areasForImprovement && result.areasForImprovement.length > 0) {
        chatText += `*üí° ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á*\n`;
        result.areasForImprovement.forEach(area => {
            chatText += `- ${area}\n`;
        });
        chatText += `\n`;
    }
    
    // Actionable Next Steps
    if (result.actionableNextSteps && result.actionableNextSteps.length > 0) {
        chatText += `*üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥*\n`;
        result.actionableNextSteps.forEach(step => {
            chatText += `- ${step}\n`;
        });
        chatText += `\n`;
    }

    // Probing Questions
    if (result.probingQuestions && result.probingQuestions.length > 0) {
        chatText += `*‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ï‡πà‡∏≠*\n`;
        result.probingQuestions.forEach(question => {
            chatText += `- _${question}_\n`;
        });
        chatText += `\n`;
    }

    // Scores Table
    chatText += `*üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô*\n`;
    (Object.entries(result.scores) as [string, CriterionFeedback][]).forEach(([key, feedback]) => {
        chatText += `*${scoreCriteriaLabels[key] || key}:* ${feedback.score}/10\n`;
        chatText += `_${feedback.reason}_\n\n`;
    });

    // Overall Summary
    chatText += `*üìñ ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°*\n`;
    chatText += `${result.summary}\n`;

    return chatText.trim();
};

// Helper function to format the entire result as plain text for email body
const formatForPlainTextEmail = (result: AnalysisResult, totalScore: number, maxScore: number): string => {
    const percentage = ((totalScore / maxScore) * 100).toFixed(0);
    const recommendationText = parseInt(percentage) >= 50
        ? "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50%) ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏ô‡∏≥‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏õ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô"
        : "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50%) ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô";

    let emailText = `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤,\n\n‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô AI ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞\n\n`;
    emailText += "========================================\n";
    emailText += "‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á)\n";
    emailText += "========================================\n";
    emailText += `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${result.advisorSummary.status}\n`;
    emailText += `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏Å: ${result.advisorSummary.keyRisk}\n`;
    emailText += `‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏∑‡∏≠: ${result.advisorSummary.discussionPoint}\n\n`;

    emailText += "========================================\n";
    emailText += "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î\n";
    emailText += "========================================\n\n";
    
    emailText += `‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠\n`;
    emailText += `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${totalScore} / ${maxScore} (${percentage}%)\n`;
    emailText += `‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ${recommendationText}\n\n`;

    if (result.redFlags && result.redFlags.length > 0) {
        emailText += `--- ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Red Flags) ---\n`;
        result.redFlags.forEach(flag => { emailText += `- ${flag}\n`; });
        emailText += `\n`;
    }

    if (result.strengths && result.strengths.length > 0) {
        emailText += `--- ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô (Strengths) ---\n`;
        result.strengths.forEach(s => { emailText += `- ${s}\n`; });
        emailText += `\n`;
    }

    if (result.areasForImprovement && result.areasForImprovement.length > 0) {
        emailText += `--- ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ---\n`;
        result.areasForImprovement.forEach(a => { emailText += `- ${a}\n`; });
        emailText += `\n`;
    }

    if (result.actionableNextSteps && result.actionableNextSteps.length > 0) {
        emailText += `--- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ ---\n`;
        result.actionableNextSteps.forEach(s => { emailText += `- ${s}\n`; });
        emailText += `\n`;
    }

    if (result.probingQuestions && result.probingQuestions.length > 0) {
        emailText += `--- ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ï‡πà‡∏≠ ---\n`;
        result.probingQuestions.forEach(q => { emailText += `- ${q}\n`; });
        emailText += `\n`;
    }

    emailText += `--- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ---\n`;
    (Object.entries(result.scores) as [string, CriterionFeedback][]).forEach(([key, feedback]) => {
        emailText += `‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ${scoreCriteriaLabels[key] || key}\n`;
        emailText += `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${feedback.score}/10\n`;
        emailText += `‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${feedback.reason}\n\n`;
    });

    emailText += `--- ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° ---\n`;
    emailText += `${result.summary}\n\n`;

    emailText += "========================================\n\n";
    emailText += `‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n\n`;
    emailText += `‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤‡∏î‡∏µ,\n‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô AI`;
    
    return emailText;
};


const ResultSection: React.FC<{ title: string; icon: React.ReactNode; children: React.ReactNode; className?: string }> = ({ title, icon, children, className = '' }) => (
    <div className={`bg-white p-6 rounded-xl shadow-lg border border-gray-200 mb-8 ${className}`}>
        <div className="flex items-center mb-4">
            {icon}
            <h3 className="text-2xl sm:text-3xl font-bold text-gray-800 ml-3">{title}</h3>
        </div>
        <div className="space-y-4 text-gray-700 text-lg">
            {children}
        </div>
    </div>
);

const AdvisorSummarySection: React.FC<{ 
    summary: AnalysisResult['advisorSummary']; 
    onCopy: () => void; 
    onEmail: () => void; 
    isCopied: boolean;
}> = ({ summary, onCopy, onEmail, isCopied }) => {
    const statusStyles = {
        'GO': { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-400' },
        'GO with major revisions': { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-400' },
        'NO-GO': { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-400' },
    };
    const currentStyle = statusStyles[summary.status] || statusStyles['GO with major revisions'];

    return (
        <div className={`p-6 rounded-xl shadow-lg border-2 ${currentStyle.bg} ${currentStyle.border} mb-8`}>
            <div className="flex items-center mb-4">
                <BriefcaseIcon className={`h-8 w-8 ${currentStyle.text}`} />
                <h3 className={`text-2xl sm:text-3xl font-bold ${currentStyle.text} ml-3`}>‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤</h3>
            </div>
            <div className={`space-y-4 ${currentStyle.text} text-lg`}>
                <div>
                    <p className="font-semibold text-base uppercase tracking-wide">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</p>
                    <p className="text-3xl font-bold">{summary.status}</p>
                </div>
                <div>
                    <p className="font-semibold text-base uppercase tracking-wide">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏•‡∏±‡∏Å (Key Risk)</p>
                    <p>{summary.keyRisk}</p>
                </div>
                <div>
                    <p className="font-semibold text-base uppercase tracking-wide">‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏∑‡∏≠</p>
                    <p>{summary.discussionPoint}</p>
                </div>
            </div>
            <div className="mt-6 pt-4 border-t border-gray-300/50 flex flex-col sm:flex-row gap-3">
                <button onClick={onCopy} className="flex-1 inline-flex items-center justify-center px-4 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all">
                    <ClipboardCopyIcon className="w-5 h-5 mr-2" />
                    {isCopied ? '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß!' : '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE'}
                </button>
                 <button onClick={onEmail} className="flex-1 inline-flex items-center justify-center px-4 py-3 border border-gray-300 text-base font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-all">
                    <EnvelopeIcon className="w-5 h-5 mr-2" />
                    ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                </button>
            </div>
        </div>
    );
};


const RedFlagsSection: React.FC<{ flags: string[] }> = ({ flags }) => {
    if (!flags || flags.length === 0) {
        return null;
    }
    return (
        <div className="bg-red-50 p-6 rounded-xl shadow-lg border-2 border-red-400 mb-8">
            <div className="flex items-center mb-4">
                <FlagIcon className="h-8 w-8 text-red-600" />
                <h3 className="text-2xl sm:text-3xl font-bold text-red-800 ml-3">‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Red Flags)</h3>
            </div>
            <div className="space-y-3 text-red-800 text-lg">
                <p className="font-semibold">‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</p>
                <ul className="list-none space-y-4">
                    {flags.map((flag, index) => (
                        <li key={index} className="flex items-start">
                             <AlertTriangleIcon className="text-red-600 mt-1 mr-3 flex-shrink-0 w-5 h-5"/>
                            <span>{renderContent(flag)}</span>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};


const RecommendationSection: React.FC<{ totalScore: number; maxScore: number }> = ({ totalScore, maxScore }) => {
    const percentage = (totalScore / maxScore) * 100;
    const shouldProceed = percentage >= 50;

    const bgColor = shouldProceed ? 'bg-green-50 border-green-200' : 'bg-yellow-50 border-yellow-200';
    const textColor = shouldProceed ? 'text-green-800' : 'text-yellow-800';
    const iconColor = shouldProceed ? 'text-green-500' : 'text-yellow-500';

    return (
        <ResultSection title="‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠" icon={<WrenchScrewdriverIcon />}>
            <div className={`p-4 rounded-lg border ${bgColor} ${textColor}`}>
                <div className="flex items-start">
                    <CheckBadgeIcon className={`flex-shrink-0 w-8 h-8 mr-4 ${iconColor}`} />
                    <div>
                        <p className="font-bold text-xl">
                            ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: <span className="text-3xl font-black">{totalScore}</span> / {maxScore} ({percentage.toFixed(0)}%)
                        </p>
                        <p className="mt-1 text-lg">
                            {shouldProceed 
                                ? "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50%) ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏ô‡∏≥‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏õ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô"
                                : "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏¢‡∏±‡∏á‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50%) ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô"
                            }
                        </p>
                    </div>
                </div>
            </div>
        </ResultSection>
    );
};

export const AnalysisResultDisplay: React.FC<AnalysisResultDisplayProps> = ({ result }) => {
  const [isCopied, setIsCopied] = useState(false);
  const totalScore = Object.values(result.scores).reduce((sum, { score }) => sum + score, 0);
  const maxTotalScore = Object.keys(result.scores).length * 10;

  const handleCopyToClipboard = () => {
    const textForChat = formatForChat(result, totalScore, maxTotalScore);
    navigator.clipboard.writeText(textForChat)
      .then(() => {
        setIsCopied(true);
        setTimeout(() => setIsCopied(false), 2000);
      })
      .catch(err => {
        console.error('Failed to copy text: ', err);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ');
      });
  };
  
  const handleSendEmail = () => {
     const subject = `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏´‡∏Å‡∏¥‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤`;
     const plainTextBody = formatForPlainTextEmail(result, totalScore, maxTotalScore);
     
     navigator.clipboard.writeText(plainTextBody)
      .then(() => {
        alert("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á (Paste) ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô");
        window.location.href = `mailto:?subject=${encodeURIComponent(subject)}`;
      })
      .catch(err => {
        console.error('Failed to copy email body: ', err);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ');
      });
  };
  
  return (
    <div className="animate-fade-in">
        <AdvisorSummarySection summary={result.advisorSummary} onCopy={handleCopyToClipboard} onEmail={handleSendEmail} isCopied={isCopied} />

        <RedFlagsSection flags={result.redFlags} />

        <RecommendationSection totalScore={totalScore} maxScore={maxTotalScore} />

        <ResultSection title="‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô (Strengths)" icon={<ThumbsUpIcon />}>
            <ul className="list-none space-y-4">
                {result.strengths.map((strength, index) => (
                    <li key={index} className="flex items-start">
                        <CheckCircleIcon className="text-green-500 mt-1 mr-3 flex-shrink-0 w-5 h-5"/>
                        <span>{renderContent(strength)}</span>
                    </li>
                ))}
            </ul>
        </ResultSection>

        <ResultSection title="‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (Areas for Improvement)" icon={<LightbulbIcon />}>
            <ul className="list-none space-y-4">
                {result.areasForImprovement.map((area, index) => (
                    <li key={index} className="flex items-start">
                         <AlertTriangleIcon className="text-yellow-500 mt-1 mr-3 flex-shrink-0 w-5 h-5"/>
                        <span>{renderContent(area)}</span>
                    </li>
                ))}
            </ul>
        </ResultSection>
        
        <ResultSection title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ (Actionable Next Steps)" icon={<ListBulletIcon />}>
             <ul className="list-none space-y-4">
                {result.actionableNextSteps.map((step, index) => (
                    <li key={index} className="flex items-start">
                        <span className="font-bold text-primary-700 mr-3">{index + 1}.</span>
                        <span>{renderContent(step)}</span>
                    </li>
                ))}
            </ul>
        </ResultSection>

        <ResultSection title="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ï‡πà‡∏≠ (Probing Questions)" icon={<QuestionMarkCircleIcon />}>
             <ul className="list-none space-y-4">
                {result.probingQuestions.map((question, index) => (
                    <li key={index} className="flex items-start">
                         <QuestionMarkCircleIcon className="text-primary-600 mt-1 mr-3 flex-shrink-0 w-5 h-5"/>
                        <span className="italic">{renderContent(question)}</span>
                    </li>
                ))}
            </ul>
        </ResultSection>


        <ResultSection title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (Preliminary Score)" icon={<ClipboardListIcon />}>
             <div className="overflow-x-auto">
                <table className="w-full text-left border-collapse">
                    <thead className="border-b-2 border-gray-200">
                        <tr>
                            <th className="p-2 sm:p-4 text-base font-semibold text-gray-600 uppercase tracking-wider">‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</th>
                            <th className="p-2 sm:p-4 text-base font-semibold text-gray-600 uppercase tracking-wider text-center">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</th>
                            <th className="p-2 sm:p-4 text-base font-semibold text-gray-600 uppercase tracking-wider">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•</th>
                        </tr>
                    </thead>
                    <tbody>
                        {(Object.entries(result.scores) as [string, CriterionFeedback][]).map(([key, feedback]) => (
                            <tr key={key} className="border-b border-gray-100 last:border-b-0">
                                <td className="p-2 sm:p-4 font-medium text-gray-800 align-top text-lg">{scoreCriteriaLabels[key] || key}</td>
                                <td className="p-2 sm:p-4 align-top">
                                    <div className="flex flex-col items-center justify-center">
                                        <ScoreRating score={feedback.score} />
                                        <span className="mt-1 text-base font-bold text-primary-700">{feedback.score}/10</span>
                                    </div>
                                </td>
                                <td className="p-2 sm:p-4 text-gray-600 align-top text-lg">
                                    <p className="italic">"{feedback.reason}"</p>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </ResultSection>

        <ResultSection title="‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (Overall Summary)" icon={<BookOpenIcon />}>
            <p className="leading-relaxed text-lg">{renderContent(result.summary)}</p>
        </ResultSection>
    </div>
  );
};
